//Category=Architecture
//Maturity level=Initial

= Hexagonal architecture

== Hexagonal architecture

This article explains so-called Hexagonal Architecture which is one of architectural styles applicable for wide variety of applications / software.

image::hexagonal-intro.png[Hexagonal Architecture]

== You have the following problem to be solved
We need to develop our software in more robust way so that it can survive technological changes.
You should be not forced to rewrite big amount of business logic code just because you need to:

* replace specific transport layer protocol,
* or replace storage technology,
* or you want to migrate from one cloud provider to another cloud provider,
* or ...

Eventually, you don't want your domain code base to be scattered and obscured with technological details such as HTTP exceptions, SQL code, JPA/Spring annotations, etc.

=== The proposed solution enables the customer
With appropriate architecture that is technology agnostic the customer should expect:

* predictable and limited costs of migration to newer version of technological components (including "breaking changes" migrations),
* manageable costs of replacing technological components (such as exchanging SQL provider or migrating from Springboot to Quarkus),
* manageable costs of infrastructure shifts (such as changing cloud provider),
* lower overall maintenance costs due to cleaner domain code and higher software quality.

=== The proposed solution is

==== addressing your business
This solution is most valuable for medium- to high-complexity software systems.
Expected benefits are measured as further development and maintenance costs as presented on the following pseudo-graph by Martin Fowler (see bibliography for source).

image::quality-fowler.png[Quality vs long term maintenance costs by M. Fowler]

Hexagonal architecture can be applied to any business domain, however it works best with domains that have rich business rules.

==== definitively needed if
Hexagonal architecture is preferred solution if:

* there is a high probability of exchanging certain technical component in the future,
* there is a necessity of applying a DDD technique (Domain Driven Design).

== How to solve your problem

=== Be domain centric
Plan and implement your domain model without any technical dependencies.
Use standard features of your programming language as they are sufficient to realize your goals.
You can use power of object oriented programming and model entities or aggregates with methods mutating their state.

=== Be use case centric
Plan and implement your use cases without any technical dependencies.
Use domain model as the only dependency to your use cases.
The use case is basically a function that uses and interacts with domain model.

The domain and use cases form "the core" as shown in the center of following diagram.

[.previewImage]
image::hexagonal.png[Hexagonal architecture]

=== Isolate and protect your core
Keep your domain model and use cases isolated from technical details.

As each use case is basically a function, call this function from glue code called inbound adapter.
The interface between your use case and the adapter is called inbound port.
Convert data from inbound specific form into use case specific form if necessary.

If your use case must call any external system (that is usually another API, event queue, database), use inversion of control pattern and hide that external system behind interface.
We call such interface an outbound port.

=== Manage your dependencies
Your ultimate goal is to keep your system core clean of any technical dependencies.
It makes more sense to present such architecture using concentric circles rather than stacked layers.
With such visualisation in mind you have to ensure that dependencies always point inwards and never in opposite direction (refer dashed arrows on following diagram). 

image::hexagonal-as-onion.png[Hexagonal Architecture presented as Onion]

It is important to note, that layers inside the core, as visible in "onion" model are optional.
You can put as many layers as you want, depending on needs.
The bare minimum seems to be however: domain and use cases.

=== Use appropriate tooling
To practically manage dependencies you can use:

* multiple source modules (using Maven or Gradle),
* https://www.archunit.org/[ArchUnit],
* combine both if needed.

== Go beyond!

=== Related documentation

* https://alistair.cockburn.us/hexagonal-architecture/[The Hexagonal Architecture by Alistair Cockburn]
* https://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html[The Clean Architecture by Robert C. Martin]
* https://jeffreypalermo.com/2008/07/the-onion-architecture-part-1/[The Onion Architecture by Jeffrey Palermon]
* _Clean Architecture: A Craftsman's Guide to Software Structure and Design_, Robert C. Martin
* _Get your hands dirty on clean architecture_, Tom Hombergs
* https://martinfowler.com/articles/is-quality-worth-cost.html[Is quality worth costs by Martin Fowler]
* https://herbertograca.com/2017/11/16/explicit-architecture-01-ddd-hexagonal-onion-clean-cqrs-how-i-put-it-all-together/[Practical example by Herberto Graca]
* https://github.com/hex-arch-training/hex-thai-star[Hex Thai Star - reimplementation of My-Thai-Star (WiP)]
* https://netflixtechblog.com/ready-for-changes-with-hexagonal-architecture-b315ec967749[Ready for changes with Hexagonal Architecture by Damir Svrtan and Sergii Makagon]
