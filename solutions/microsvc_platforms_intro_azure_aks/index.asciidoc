//Platform=Azure
//Maturity level=Initial

== Azure Microservice Platforms Solution AKS
=== Overview

TODO kubernetes core

The services that (can) complement Kubernetes:

* Provisioning
+
See Provisioning for general aspects how you can handle provisioing in Azure such as creating pipelines for creating infrastructure. Additional aspects such as building a containe image are described here.
* Azure Container Registry
* Azure AD
+
Azure Active Directory provides the service principal the pipelines run with.
* Monitoring
+
For infrastructure monitoring see "Monitoring". For application monitoring specific tools exist which will be described here.

The picture illustrates the setup with the major dependencies:

image::complementing_services.png[Complementing Services, width=594, height=335]

=== Pattern Details
==== Geting Started

TODO if there are options what do I have to decide first e.g. organizations, projects and teams in case of Azure DevOps

==== Remaining goals

Points from summary Migration:

* Deployment resources to Kubernetes
+
--
Instead of having to write separate YAML files for each application manually, you can simply *create a Helm chart* and let Helm deploy the application to the cluster for you. Helm charts contain templates for various Kubernetes resources that combine to form an application. A Helm chart can be customized when deploying it on different Kubernetes clusters. Helm charts can be created in such a way that environment or deployment-specific configurations can be extracted out to a separate file so that these values can be specified when the Helm chart is deployed. For example, you need not have separate charts for deploying an application in development, staging, and production environments.

*Chart linting* is an easy tool that you can add to your pipeline to ensure your deployments are valid and versioned correctly.
For security reasons and improvement of Helm charts, it is useful to make use of at least one Helm linting tool.
Why choosing Polaris as Linting Tool:
For helm chart linting, there are several tools like Polaris, kube-score or config-lint available. With Polaris, checks and rules are already given by default, whereby other tools need a lot of custom rules configuration and are therefore more complex to setup.
Polaris runs a variety of checks to ensure that Kubernetes pods and controllers are configured using best practices, helping to avoid problems in the future. 
Polaris can be either installed inside a cluster or as a command-line tool to analyze Kubernetes manifests statically.

The Helm operator provides an extension to Flux that automates Helm Chart releases. A Helm Chart release is described via a Kubernetes custom resource named HelmRelease. Flux synchronizes these resources from Git to the cluster, while the Helm operator makes sure Helm Charts are released as specified in the resources.
--
* Configuration
+
--
Azure Key Vault to Kubernetes (akv2k8s) is used for our applications, to make *Azure Key Vault secrets*, certificates and keys available to use in a secure way.
The goals of Azure Key Vault to Kubernetes are to avoid a direct program dependency for getting secrets, secure and low risk to transfer Azure Key Vault secrets and transparently inject secrets into applications.
Per default secrets, configurations and certificates can be easily read and accessed by users in Kubernetes and access to them can only be restricted by setting access rights. This will be avoided and is a huge benefit of using akv2k8s with a simple setup of Azure Key Vault and the option to set more detailed restrictions and configurations.

*Question:* What about telling container what is the right key vault? (Injection needs to know about environment)

Tools for synchronizing configuration:

* ArgoCD:
+
Continuous Delivery for Kubernetes: ArgoCD is a leader developed by Intuit and synchronizes changes in the code of applications, photos and cluster definitions, so the Git - repository , to the cluster. The solution is open source software, kept relatively simple and is one of the most important and oldest tools on the market.
*	Flux
+
Integration of Flux CD into the workflow: Flux basically does the same job as ArgoCD, i.e. synchronizes the repository and cluster in the course of continuous delivery. Flux is also open source and kept simple - the special thing: It comes from the GitOps inventor Weaveworks.

*Question:* Have heard about built in Flux support in AKS
--
* Monitoring
+
--
Application monitoring: Prometheus
Infrastructure: see Standard (Extend dashboarding)
--

=== Variations

The following alternatives exist:

* Managed Openshift
+
--
Comment Openshift: Refers to Red Hat Openshift and not hosted offering
TODO: Better variation for me managed OpenShift (https://docs.microsoft.com/en-us/azure/openshift/intro-openshift[Link])

[options="header"]
|=======================
|Criteria|Openshift      |Kubernetes
|Flexibility |Limited; opinionated components/ fnctionalities     |greater flexibility
|Installation    |limited options| almost anywhere
|Security    |very strict; certain permission level for maintenance
|Deployment|less flexible DeplyomentConfig|very flexile helm charts
|External access    |via Routers |via ingress conntrollers
|Management    |ImageStreams improve management |Management container images not that easy
|Usere experience    |Better user support |additional tool for user experience
|Networking    |native networking solution |some components don't have networking + third party required
|Service Catalog    |better |less provision of services within clusters
|=======================
--

=== When to use

When you need orchestration support due to a higher number of microservices. If you start with a single service then Function App reduces greatly the complexity. You can still later on move to Kubernetes by containerizing your function app code.