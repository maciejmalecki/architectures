//Platform=Azure
//Maturity level=Advanced

== Azure Monitoring
=== Context & Problem
==== Terminology

_Used definition: A monitoring solution helps the monitoring consumer achieve the satisfactory level of control of a defined service_. footnote:[https://docs.microsoft.com/en-us/azure/cloud-adoption-framework/manage/monitor/observability]

This definition already includes the following:

* *Defined service:* The resources you want to monitor aka monitored resources.
* *Level of control:* That is your bandwidth in which your defined service operates normally aka known as baseline
* *Measuring:* A measurement is a single act that quantifies an attribute of a part, equipment, service or process (CPU load, available memory etc.). Data measured is emitted by the monitored resources and aka telemetry.
* *Monitoring consumer:* The user trying to keep the service within its baseline boundaries. A single control plane is usually preferred to simplify the operations for the consumer aka monitoring plane. Depending on its perspective the area of cous might differ such as performance, costs, security etc. Independent from the underlying platform.
+
--
Actions might be triggered by the system or the consumer to achieve that. This might include:

* Visualize current state
* Detect Deviations from baseline
* Root cause analysis
* Forward externally
--
Monitoring should be implemented as feedback loop where lessons learnt are the starting point for further improvements on the defined service side. E.g. by adaptive scaling depending on monitored traffic.

The use case defines what is the defined service and the perspectives and control level to be achieved. It also defines external dependencies/ preconditions that have to be considered. Deployment of monitored resources might also be part of it. The platform provides the technical capabilities on which the sue case is implemented. The picture below illustrates this:

image::Monitoring.png[First image]

==== Standard Problems

A general solution for all potential problems is not possible due to the multitude of different requirements. The idea is therefore to address certain standard features which are as follows:

* Visualizations
* Measuring
* Improving Feedback Loop
* Optimization of alerts
* Correlation of telemetry entries
* Archiving Telemetry Data

=== Azure as Platform

The possibilities depend heavily on the perspective and the resources you want to monitor. A major tool to implement the monitoring plane is Azure Monitor with its features Application Insights and Log Analytics. The subsequent chapters focus on these major services. However, other services depending on your perspective might be relevant too. The following services relevant by category:

* Performance: Azure Monitor (Network Monitor)
* Availability: Azure Service Health, Azure Resource Health
* Security: Azure Service Health, Azure Sentinel, Azure AD
* Costs: Cost Management

The following conventions apply regarding the measurement for monitored resources:

* *Push to monitoring plane*
+
--
In that case telemetry is forwarded to the monitoring plane. This can be necessary if the telemetry is not available in Azure monitor out of the box or pulling from the monitored resources is not possible. Examples of forwarding that requires explicit activation:

* Diagnostic setting (differs per resource): requires a diagnostic setting to be activated.
* App Insights Instrumentation/ Linking: Linked App Insights must be specified for the monitored resource
* Manual forwarding: e.g. by scheduled process using API provided by Azure Monitor if the exporting options are not granular enough

This approach requires additional data sources on in the monitoring plane which might be inside Azure monitor (Log Analytics Workspace/ App Insights) or external.
--
* *Pull from monitored resource*
+
--
In that case the telemetry data is read directly from the monitoring plane such as metrics. Logs cannot be read directly and require pushing. Compared to pushing this method is also faster.
--

Azure Monitor as monitoring plane covers the following major features:

* *Telemetry Analytics*
+
--
Kusto is addressing that need and allows you to access external data sources such as blobs and internal data sources inside Azure Monitor. Graphical representation is also possible.
--
* *Visualization* (Workbooks, Dashboards, other services)
* *Alerts*
+
--
To react automatically if outside operational boundaries. Results from Kusto queries can be used as trigger.
--
* *Root Cause analysis* (TODO)
** Application Map => application dependencies in other services such as backend APIs or databases
** Smart Detection => warn you when anomalies in performance or utilization patterns
** Usage Analysis => features of your application are most frequently used
** Release annotations => visual indicators in your Application Insights charts of new builds and other events. Possible to correlate changes in application performance to code releases.
** Cross-component transaction diagnostics => shows you broken piece in the entire transaction
** Snapshot Debugger => collect a snapshot of a live application in case of an exception, to analyze it at a later stage.
* *Integration*
+
--
Azure Monitor has also extensive integration features. This includes:

* Integrating telemetry from other Azure services (e.g. Azure Security Center also forwards to Azure Monitor)
* Integrating external data sources (e.g. Blobs by using Kusto external operator)
* Integrating third party tools such as Prometheus for Azure Kuberenetes
* Exposing for data sources for external third party (e.g. Log Analytics Workspaces for Grafana)
--

Azure Monitor pricing comes with the following:

* *Ingestion:* Applies for additional data pushed to Azure monitor
* *Storage:* Data stored within Azure Monitor costs => Long term Archiving solution must be therefore found
* *Alerts:* Are charged as well => strategy for minimizing them is required

=== Solution
==== Overview

The solution is to use Azure Monitor and its features. The subsequent detail variations that can be used for solving the problems outlined above.

[arabic, start=2]
==== Variations
[arabic]
===== Visualization

Visualization requires the following points:

* *Providing a canvas*
+
--
Canvas refers to the area on which you place carious components. The following options exist:

[width="99%",cols="41%,16%,16%,12%,15%",options="header",]
|===
|  3+|Azure |Third party
|  |Workbooks |Dashboards |Power BI |Grafana
|Auto refresh in 5 Min Intervall |X  |X  |  |???
|Full screen |  |X |??? |???
|Tabs |X |  |??? |???
|Fixed Parameter lists |X |  |??? |X
|Drill down |  |  |X |X
|Additional hosting required |  |  |  |X
|Terraform Support |  |X |X |X
|===

Regarding components for logs/ metrics:

* Metrics: Pull (Metrics explorer) or push (Kusto query targeting data source) possible
* Logs: Push to monitoring plane only
* Grafana can be used for visualization via using a connector for log analytics workspace
--

* *Data source*
+
--
Can be inside Azure Monitor or external. External stores can avoid high Azure Monitor costs for ingestion/ storage.

*NOTE* Referencing an external data source requires authentication e.g. by using a shared access signature for a blob. Updating a saved query is only possible for log analytics.
--

===== Measuring

The table below shows possible options:

[width="100%",cols="41%,15%,15%,16%,13%",options="header",]
|===
|  |Diagnostic Settings |App Insights |Push via resource API |Metrics Explorer
|Possible per resource |(X) |(X) |X |(X)
|Telemetry Customization |Limited |High |Limited-High |Limited
|Custom Logging in executed code |  |X |  | 
|Telemetry always captured | X | (X) |X | X
|Latency |Medium |Medium |Medium |Low
|Direction |Push |Push |Push |Pull
|===

Comments:

* Option “Push via resource API” => A scheduled script that reads periodically telemetry and pushes it to monitoring plane using the Rest API
* „Telemetry always captured“ => Some resources allow multiple ways to run something e.g. via UI or programmatically. If the telemetry is always captured the way does not matter.

===== Archiving

A good archiving store is blob storage. Lifecycle policies can be used to drop the blob after a predefined amount of time.

=== When to use

This solution assumes that your control plane is in Azure and that your monitored resources are located in Azure.
